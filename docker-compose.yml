version: "3.8"

services:
  postgres:
    image: postgres:14
    container_name: ${PROJECT_NAME}-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: ${PROJECT_NAME}-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./services/api
    container_name: ${PROJECT_NAME}-api
    depends_on:
      - postgres
      - redis
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
    ports:
      - "${API_PORT:-8000}:8000"
    restart: unless-stopped
    networks:
      - backend
      - frontend
    volumes:
      - ./services/api:/app

  data-analyzer:
    build:
      context: ./services/crew-ai
    container_name: ${PROJECT_NAME}-data-analyzer
    depends_on:
      - postgres
      - redis
      - api
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MAX_SCRAPING_REQUESTS_PER_HOUR=${MAX_SCRAPING_REQUESTS_PER_HOUR:-100}
      - API_URL=http://api:8000
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./services/crew-ai:/app

  website-builder:
    build:
      context: ./services/website-builder
    container_name: ${PROJECT_NAME}-website-builder
    depends_on:
      - postgres
      - redis
      - api
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - API_URL=http://api:8000
      - SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
      - SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET}
      - SHOPIFY_STORE_URL=${SHOPIFY_STORE_URL}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./services/website-builder:/app

  content-generator:
    build:
      context: ./services/content-generator
    container_name: ${PROJECT_NAME}-content-generator
    depends_on:
      - postgres
      - redis
      - api
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - API_BASE_URL=http://api:8000
      - AGENT_ID=content-generator
      - AGENT_VERSION=0.1.0
      - POLL_INTERVAL=5
      - DEFAULT_LANGUAGE=fr
      - DEFAULT_TONE=persuasive
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./services/content-generator:/app
      - ./logs:/app/logs

  order-manager:
    build:
      context: ./services/order-manager
    container_name: ${PROJECT_NAME}-order-manager
    depends_on:
      - postgres
      - redis
      - api
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - API_BASE_URL=http://api:8000
      - AGENT_ID=order-manager
      - AGENT_VERSION=0.1.0
      - ORDER_MANAGER_API_SECRET=${ORDER_MANAGER_API_SECRET}
      - ALIEXPRESS_API_KEY=${ALIEXPRESS_API_KEY}
      - ALIEXPRESS_API_SECRET=${ALIEXPRESS_API_SECRET}
      - CJ_DROPSHIPPING_API_KEY=${CJ_DROPSHIPPING_API_KEY}
      - CJ_DROPSHIPPING_EMAIL=${CJ_DROPSHIPPING_EMAIL}
      - ORDER_MANAGER_WEBHOOK_SECRET=${ORDER_MANAGER_WEBHOOK_SECRET}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - SHOPIFY_STORE_URL=${SHOPIFY_STORE_URL}
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./services/order-manager:/app
      - ./logs:/app/logs

networks:
  backend:
  frontend:

volumes:
  postgres_data:
  redis_data:
  shopify_data:
